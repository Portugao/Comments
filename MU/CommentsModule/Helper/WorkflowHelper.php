<?php
/**
 * Comments.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\CommentsModule\Helper;

use MU\CommentsModule\Helper\Base\AbstractWorkflowHelper;

use Zikula\Core\Doctrine\EntityAccess;
use Psr\Log\LoggerInterface;
use Symfony\Component\Workflow\Registry;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\PermissionsModule\Api\ApiInterface\PermissionApiInterface;
use Zikula\UsersModule\Api\ApiInterface\CurrentUserApiInterface;
use MU\CommentsModule\Entity\Factory\EntityFactory;
use MU\CommentsModule\Helper\ListEntriesHelper;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;

/**
 * Helper implementation class for workflow methods.
 */
class WorkflowHelper extends AbstractWorkflowHelper
{
	/**
	 * @var VariableApiInterface
	 */
	protected $variableApi;
	
	/**
	 * WorkflowHelper constructor.
	 *
	 * @param TranslatorInterface     $translator        Translator service instance
	 * @param Registry                $registry          Workflow registry service instance
	 * @param LoggerInterface         $logger            Logger service instance
	 * @param PermissionApiInterface  $permissionApi     PermissionApi service instance
	 * @param CurrentUserApiInterface $currentUserApi    CurrentUserApi service instance
	 * @param EntityFactory           $entityFactory     EntityFactory service instance
	 * @param ListEntriesHelper       $listEntriesHelper ListEntriesHelper service instance
	 * @param VariableApiInterface    $variableApi       VariableApiInterface
	 *
	 * @return void
	 */
	public function __construct(
			TranslatorInterface $translator,
			Registry $registry,
			LoggerInterface $logger,
			PermissionApiInterface $permissionApi,
			CurrentUserApiInterface $currentUserApi,
			EntityFactory $entityFactory,
			ListEntriesHelper $listEntriesHelper,
			VariableApiInterface $variableApi
			) {
				$this->translator = $translator;
				$this->workflowRegistry = $registry;
				$this->logger = $logger;
				$this->permissionApi = $permissionApi;
				$this->currentUserApi = $currentUserApi;
				$this->entityFactory = $entityFactory;
				$this->listEntriesHelper = $listEntriesHelper;
				$this->variableApi = $variableApi;
	}
	
	/**
	 * Executes a certain workflow action for a given entity object.
	 *
	 * @param EntityAccess $entity    The given entity instance
	 * @param string       $actionId  Name of action to be executed
	 * @param boolean      $recursive True if the function called itself
	 *
	 * @return boolean Whether everything worked well or not
	 */
	public function executeAction(EntityAccess $entity, $actionId = '', $recursive = false)
	{
		$workflow = $this->workflowRegistry->get($entity);
		if (!$workflow->can($entity, $actionId)) {
			return false;
		}
	
		// get entity manager
		$entityManager = $this->entityFactory->getObjectManager();
		$logArgs = ['app' => 'MUCommentsModule', 'user' => $this->currentUserApi->get('uname')];
	
		$result = false;
	
		try {
			$workflow->apply($entity, $actionId);
	
			if ($actionId == 'delete') {
				$entityManager->remove($entity);
				$entityManager->flush();
			} else {
				if ($entity['content'] != '') {
					$result = false;
				} else {
					$toModeration = $this->variableApi->get('MUCommentsModule', 'toModeration');
					if ($toModeration != '') {
	
					}
					$toNotSaved = $this->variableApi->get('MUCommentsModule', 'toNotSaved');
					if ($toNotSaved != '') {
	
					}
					$entityManager->persist($entity);
					$entityManager->flush();
					$result = true;
				}
			}
	
			if ($actionId == 'delete') {
				$this->logger->notice('{app}: User {user} deleted an entity.', $logArgs);
			} else {
				$this->logger->notice('{app}: User {user} updated an entity.', $logArgs);
			}
		} catch (\Exception $exception) {
			if ($actionId == 'delete') {
				$this->logger->error('{app}: User {user} tried to delete an entity, but failed.', $logArgs);
			} else {
				$this->logger->error('{app}: User {user} tried to update an entity, but failed.', $logArgs);
			}
			throw new \RuntimeException($exception->getMessage());
		}
	
		if (false !== $result && !$recursive) {
			$entities = $entity->getRelatedObjectsToPersist();
			foreach ($entities as $rel) {
				if ($rel->getWorkflowState() == 'initial') {
					$this->executeAction($rel, $actionId, true);
				}
			}
		}
	
		return (false !== $result);
	}
    // feel free to add your own convenience methods here
}
