<?php
/**
 * Comments.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\CommentsModule\Controller;

use MU\CommentsModule\Controller\Base\AbstractAjaxController;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Security\Core\Exception\AccessDeniedException;

/**
 * Ajax controller implementation class.
 *
 * @Route("/ajax")
 */
class AjaxController extends AbstractAjaxController
{
    
    /**
     * Searches for entities for auto completion usage.
     *
     * @Route("/getItemListAutoCompletion", options={"expose"=true})
     * @Method("GET")
     *
     * @param Request $request Current request instance
     *
     * @return JsonResponse
     */
    public function getItemListAutoCompletionAction(Request $request)
    {
        return parent::getItemListAutoCompletionAction($request);
    }
    
    /**
     * Attachs a given hook assignment by creating the corresponding assignment data record.
     *
     * @Route("/attachHookObject", options={"expose"=true})
     * @Method("POST")
     *
     * @param Request $request Current request instance
     *
     * @return JsonResponse
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function attachHookObjectAction(Request $request)
    {
        return parent::attachHookObjectAction($request);
    }
    
    /**
     * Detachs a given hook assignment by removing the corresponding assignment data record.
     *
     * @Route("/detachHookObject", options={"expose"=true})
     * @Method("POST")
     *
     * @param Request $request Current request instance
     *
     * @return JsonResponse
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function detachHookObjectAction(Request $request)
    {
        return parent::detachHookObjectAction($request);
    }
    
    /**
     * Detachs a given hook assignment by removing the corresponding assignment data record.
     *
     * @Route("/edit", options={"expose"=true})
     * @Method("POST")
     *
     * @param Request $request Current request instance
     *
     * @return JsonResponse
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function editAction(Request $request)
    {
    	return $this->editInternal($request);
    }
    
    /**
     * Detachs a given hook assignment by removing the corresponding assignment data record.
     *
     * @Route("/answer", options={"expose"=true})
     * @Method("POST")
     *
     * @param Request $request Current request instance
     *
     * @return JsonResponse
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function answerAction(Request $request)
    {
    	return $this->answerInternal($request);
    }
    
    /**
     * Attachs a given hook assignment by creating the corresponding assignment data record.
     *
     * @param Request $request Current request instance
     *
     * @return JsonResponse
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function editInternal(Request $request)
    {
    	if (!$this->hasPermission('MUCommentsModule::Ajax', '::', ACCESS_EDIT)) {
    		throw new AccessDeniedException();
    	}
    	
    	$content = $request->request->get('content', '');
    	
    	$variableApi = $this->get('zikula_extensions_module.api.variable');
    	$spam = $variableApi->get('MUCommentsModule', 'enableInternSpamHandling');
    	if ($spam == 1) {
    		if ($content != '') {
    			return new JsonResponse($this->__('Wrong input'), JsonResponse::HTTP_FORBIDDEN);
    		}
    	}
    
    	$subscriberOwner = $request->request->get('owner', '');
    	$subscriberAreaId = $request->request->get('areaId', '');
    	$subscriberObjectId = $request->request->getInt('objectId', 0);
    	//$subscriberUrl = $request->request->get('url', '');
    	$assignedEntity = $request->request->get('assignedEntity', '');
    
    	if (!$subscriberOwner || !$subscriberAreaId || !$subscriberObjectId || !$assignedEntity) {
    		return new JsonResponse($this->__('Error: invalid input.'), JsonResponse::HTTP_BAD_REQUEST);
    	}
    
    	//$subscriberUrl = !empty($subscriberUrl) ? unserialize($subscriberUrl) : [];
    	 
    	$entityManager = $this->get('mu_comments_module.entity_factory')->getObjectManager();
    	$repository = $this->get('mu_comments_module.entity_factory')->getRepository('comment');
    	$parentEntity = '';
    	$subject = $request->request->get('subject', '');
    	$name = $request->request->get('name', '');
    	$text = $request->request->get('text', '');
    	
    	$kindOfModeration = '';
    	
    	if ($spam == 1) {    	
	    	$toModeration = $variableApi->get('MUCommentsModule', 'toModeration');
	    	if ($toModeration != '') {
	    		$toModeration = explode(',', $toModeration);
	    		if (is_array($toModeration)) {
	    		foreach ($toModeration as $moderation) {
	    			if ($subject != '') {
	    			if(strpos($moderation,$subject) !== false) {
	    			    $kindOfModeration = 'moderate';
	    			    break;
	    			}
	    			}
	    			if ($name != '') {
	    				if(strpos($moderation,$name) !== false) {
	    					$kindOfModeration = 'moderate';
	    					break;
	    				}
	    			}
	    			if ($text != '') {
	    				if(strpos($moderation,$text) !== false) {
	    					$kindOfModeration = 'moderate';
	    					break;
	    				}
	    			}
	    		}
	    		} else {
	    			if ($subject != '') {
	    			if(strpos($toModeration,$subject) !== false) {
	    				$kindOfModeration = 'moderate';
	    			}
	    			}
	    			if ($name != '') {
	    				if(strpos($toModeration,$name) !== false) {
	    					$kindOfModeration = 'moderate';
	    				}
	    			}
	    			if ($text != '') {
	    				if(strpos($toModeration,$text) !== false) {
	    					$kindOfModeration = 'moderate';
	    				}
	    			}
	    			}
	    		}
	    	
	    	$toNotSaved = $variableApi->get('MUCommentsModule', 'toNotSaved');
	    	if ($toNotSaved != '') {
	    		$toNotSaved = explode(',', $toNotSaved);
	    		if (is_array($toNotSaved)) {
	    		foreach ($toNotSaved as $notsaved) {
	    			if ($subject != '') {
	    			if(strpos($notsaved,$subject) !== false) {
	    				$kindOfModeration = 'block';
	    				break;
	    			}
	    			}
	    			if ($name != '') {
	    				if(strpos($notsaved,$name) !== false) {
	    					$kindOfModeration = 'block';
	    					break;
	    				}
	    			}
	    			if ($text != '') {
	    				if(strpos($notsaved,$text) !== false) {
	    					$kindOfModeration = 'block';
	    					break;
	    				}
	    			}
	    		}
	    		} else {
	    			if ($subject != '') {
	    				if(strpos($toNotSaved,$subject) !== false) {
	    					$kindOfModeration = 'block';
	    				}
	    			}
	    			if ($name != '') {
	    				if(strpos($toNotSaved,$name) !== false) {
	    					$kindOfModeration = 'block';
	    				}
	    			}
	    			if ($text != '') {
	    				if(strpos($toNotSaved,$text) !== false) {
	    					$kindOfModeration = 'block';
	    				}
	    			}
	    		}
	    	}
    	}
    	
    	$message = $request->request->get('message');
    	$thisId = $request->request->get('thisComment');
    	$parentid = $request->request->get('parentcomment', 0);
    	if ($thisId == 0) {
    		return new JsonResponse($this->__('No comment id for editing.'), JsonResponse::HTTP_BAD_REQUEST);
    	}
    	if ($parentid > 0) {
    		$parentEntity = $repository->find($parentid);
    		if (!is_object($parentEntity)) {
    			return new JsonResponse($this->__('Error: no object.'), JsonResponse::HTTP_BAD_REQUEST);
    		}
    	}
    	
    	$thisComment = $repository->find($thisId);

    	if ($subject != '') {
    		$thisComment->setSubject($subject);
    	} else {
    		$thisComment->setSubject('');
    	}
    	$thisComment->setName($name);
    	$thisComment->setText($text);
    	if (is_Object($parentEntity)) {
    		$thisComment->setComment($parentEntity);
    	} else {
    		$thisComment->setComment(NULL);
    	}

    	if ($kindOfModeration == 'moderate') {
    		$thisComment->setWorkflowState('waiting');
    	}
    	
    	if ($kindOfModeration != 'block') {
    	$entityManager->persist($thisComment);
    	$entityManager->flush();
    	
    	 
    	$controllerHelper = $this->get('mu_comments_module.controller_helper');
    	$profileLink = $controllerHelper->getProfileLink($thisComment->getCreatedBy()->getUid());
    	$avatar = $controllerHelper->getAvatar($thisComment->getCreatedBy()->getUid());
    	if ($profileLink != '#') {
    	$link = '<a href="' . $profileLink . '" >' . $thisComment->getCreatedBy()->getUname() . '</a>';
    	} else {
    	    $link = $thisComment->getCreatedBy()->getUname();
    	}
    
    	// return response
    	return new JsonResponse([
    			'id' => $thisId,
    			'subject' => $thisComment->getSubject(),
    			'text' => $thisComment->getText(),
    			'user' => $thisComment->getCreatedBy()->getUname(),
    			'avatar' => $avatar,
    	        'created' => $thisComment->getCreatedDate()->format('d:m:Y, H:i'),
    			'link' => $link
    	]);
    	} else {
    	return new JsonResponse([
    			'id' => 0
    	]);
    	}
    }
    
    /**
     * Attachs a given hook assignment by creating the corresponding assignment data record.
     *
     * @param Request $request Current request instance
     *
     * @return JsonResponse
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function answerInternal(Request $request)
    {
    	if (!$this->hasPermission('MUCommentsModule::Ajax', '::', ACCESS_COMMENT)) {
    		throw new AccessDeniedException();
    	}
    	
    	$content = $request->request->get('content', '');
    	 
    	$variableApi = $this->get('zikula_extensions_module.api.variable');
    	$spam = $variableApi->get('MUCommentsModule', 'enableInternSpamHandling');
    	// if spam is enalbled content has to be empty
    	if ($spam == 1) {
    		if ($content != '') {
    			return new JsonResponse($this->__('Wrong input'), JsonResponse::HTTP_FORBIDDEN);
    		}
    	}
    
    	$subscriberOwner = $request->request->get('owner', '');
    	$subscriberAreaId = $request->request->get('areaId', '');
    	$subscriberObjectId = $request->request->getInt('objectId', 0);
    	//$subscriberUrl = $request->request->get('url', '');
    	$assignedEntity = $request->request->get('assignedEntity', '');
    
    	if (!$subscriberOwner || !$subscriberAreaId || !$subscriberObjectId || !$assignedEntity) {
    		return new JsonResponse($this->__('Error: invalid input.'), JsonResponse::HTTP_BAD_REQUEST);
    	}
    
    	//$subscriberUrl = !empty($subscriberUrl) ? unserialize($subscriberUrl) : [];
    	
    	$entityManager = $this->get('mu_comments_module.entity_factory')->getObjectManager();
    	$repository = $this->get('mu_comments_module.entity_factory')->getRepository('comment');
    	$parentEntity = '';
    	$subject = $request->request->get('subject', '');
    	$name = $request->request->get('name', '');
    	$text = $request->request->get('text');
    	$parentid = $request->request->get('parentcomment');
    	$mainId = $request->request->get('maincomment');
    	$mail = $request->request->get('mail');
    	$privacy = $request->request->get('privacy', 0);
    	$privacyLink = $this->getVar('linkToPrivacyPolicy');
    	if ($privacy == 0 && $privacyLink != '') {
    		return new JsonResponse([
    				'id' => -1
    		]);
    	}
    	
    	if ($mainId == 0) {
    		$mainId = $parentid;
    	}
    	if ($parentid > 0) {
    	    $parentEntity = $repository->find($parentid);
    	    if (!is_object($parentEntity)) {
    		    return new JsonResponse($this->__('Error: no parent object.'), JsonResponse::HTTP_BAD_REQUEST);
    	    }
    	}
    	
    	if ($mainId > 0) {
    		$mainEntity = $repository->find($mainId);
    		if (!is_object($mainEntity)) {
    			return new JsonResponse($this->__('Error: no main object.'), JsonResponse::HTTP_BAD_REQUEST);
    		}
    	}
    	
    	$kindOfModeration = '';
    	 
    	if ($spam == 1) {
    		$toModeration = $variableApi->get('MUCommentsModule', 'toModeration');
    		if ($toModeration != '') {
    			$toModeration = explode(',', $toModeration);
    			foreach ($toModeration as $moderation) {
    				if(strpos($subject, $moderation) !== false || strpos($name, $moderation) !== false || strpos($text, $moderation) !== false) {
    					$kindOfModeration = 'moderate';
    					break;
    				}
    			}
    		}
    		$toNotSaved = $variableApi->get('MUCommentsModule', 'toNotSaved');
    		if ($toNotSaved != '') {
    			$toNotSaved = explode(',', $toNotSaved);
    			foreach ($toNotSaved as $notsaved) {
    				if(strpos($subject, $notsaved) !== false || strpos($name, $notsaved) !== false || strpos($text, $notsaved) !== false) {
    					$kindOfModeration = 'block';
    					break;
    				}
    			}
    		}
    	}
 	
    	if ($kindOfModeration != 'block') {
    	$comment = new \MU\CommentsModule\Entity\CommentEntity();
    	if ($subject != '') {
    	    $comment->setSubject($subject);	
    	} else {
    	    $comment->setSubject('');
    	}
    	$comment->setName($name);
    	$comment->setText($text);
    	if ($mail == 1) {
    	    $comment->setSendMails(1);
    	}
    	if ($privacy == 1) {
    		$comment->setPrivacyPolicy($privacy);
    	}
    	if (is_Object($parentEntity)) {
    	    $comment->setComment($parentEntity);
    	} else {
    		$comment->setComment(NULL);
    	}
    	$comment->setMainId($mainId);
    	if ($kindOfModeration == 'moderate') {
    		$comment->setWorkflowState('waiting');
    	} else {
    	    $comment->setWorkflowState('approved');
    	}
    	
    	$entityManager->persist($comment);
    	$entityManager->flush();
    	
    	$commentId = $comment->getId();
    
    	$assignment = new \MU\CommentsModule\Entity\HookAssignmentEntity();
    	$assignment->setSubscriberOwner($subscriberOwner);
    	$assignment->setSubscriberAreaId($subscriberAreaId);
    	$assignment->setSubscriberObjectId($subscriberObjectId);
    	//$assignment->setSubscriberUrl($subscriberUrl);
    	$assignment->setAssignedEntity($assignedEntity);
    	$assignment->setAssignedId($commentId);
    	$assignment->setUpdatedDate(new \DateTime()); 

    	$entityManager->persist($assignment);
    	$entityManager->flush();
    	
    	$controllerHelper = $this->get('mu_comments_module.controller_helper');
    	$profileLink = $controllerHelper->getProfileLink($comment->getCreatedBy()->getUid());
    	$avatar = $controllerHelper->getAvatar($comment->getCreatedBy()->getUid());
    	$link = '<a href="' . $profileLink . '" >' . $comment->getCreatedBy()->getUname() . '</a>';
    
    	if($kindOfModeration == '') {
    	// return response
    	return new JsonResponse([
    			'id' => $commentId,
    			'subject' => $comment->getSubject(),
    			'text' => $comment->getText(),
    			'user' => $comment->getCreatedBy()->getUname(),
    			'avatar' => $avatar,
    			'created' => $comment->getCreatedDate()->format('d:m:Y, H:i'),
    			'link' => $link,
    			'moderate' => 'no'
    	]);
    	} elseif ($kindOfModeration == 'moderate') {
    		// return response
    		return new JsonResponse([
    				'id' => $commentId,
    				'moderate' => 'yes'
    		]);    		
    	}
    	} else {
    	return new JsonResponse([
    			'id' => 0
    	]);
    	}
    }

    // feel free to add your own ajax controller methods here
}
