{# purpose of this template: inclusion template for display of related comments or hook assignments #}
{#
    You can use the context variable to check for the context of this list:
        - 'display': list of related comments included in a display template
        - 'hookDisplayView': list of comments assigned using an UI hook (display/view template)
        - 'hookDisplayEdit': list of comments assigned using an UI hook (edit template)
        - 'hookDisplayDelete': list of comments assigned using an UI hook (delete template)
#}
{% set hasAdminPermission = hasPermission('MUCommentsModule:Comment:', '::', 'ACCESS_COMMENT') %}
{% set hasEditPermission = hasPermission('MUCommentsModule:Comment:', '::', 'ACCESS_COMMENT') %}
{% if context != 'display' %}
    <h3>{{ __('Comments') }}</h3>
    {{ pageAddAsset('stylesheet', zasset('@MUCommentsModule:css/style.css')) }}
    {{ pageAddAsset('stylesheet', asset('jquery-ui/themes/base/jquery-ui.min.css')) }}
    {{ pageAddAsset('stylesheet', asset('bootstrap-jqueryui/bootstrap-jqueryui.min.css')) }}
    {{ pageAddAsset('javascript', asset('jquery-ui/jquery-ui.min.js')) }}
    {{ pageAddAsset('javascript', asset('bootstrap-jqueryui/bootstrap-jqueryui.min.js')) }}
    {{ pageAddAsset('javascript', zasset('@MUCommentsModule:js/MUCommentsModule.js'), 99) }}
    {% if context == 'hookDisplayView' and hasEditPermission %}
        {% set entityNameTranslated = __('comment') %}
        {{ pageAddAsset('javascript', zasset('@MUCommentsModule:js/MUCommentsModule.HookAssignment.js'), 99) }}
        {{ pageAddAsset('javascript', zasset('@MUCommentsModule:js/MUCommentsModule.AutoCompletion.js'), 99) }}
    {% endif %}
{% endif %}
{% set levels = getModVar('MUCommentsModule', 'levelsOfComments') %}
{% if items|default and items|length > 0 %}
<div class="list-group mucommentsmodule-related-item-list comment">
{% for item in items %}
    <div id="comment{{ item.id }}" class="comment-container">
    <div class="col-md-3">
        <div class="comment-user">
        {% set profileLink = item.createdBy.getUid()|profileLinkByUserId() %}
        {{ profileLink|raw }}<br />
        <span class="comment-avatar">{{ userAvatar(item.createdBy.getUid(), {rating: 'g'}) }}</span>
        {{ item.yourMailAdress }}
        {{ item.homepage }}
        </div>
    </div>
    <div class="col-md-9">
    <div class="comment-content">
        <div class="comment-header">{{ item.title }}</div>
        <div id="commenttext{{ item.id }}" class="comment-text">{{ item.text }} 
        {% if levels == 'one' or levels == 'two' or levels == 'three' %}
        <span class="answer-container"><a title="{{ item.id }}" class="comment-answer btn btn-default btn-xs" href="#"><i class="fa fa-reply" aria-hidden="true"></i></a><span class="answer-form"></span></span>
        {% endif %}
        <noscript>
        <form id="form{{ item.id }}" class="answer-form" action="{{ path('mucommentsmodule_ajax_' ~ routeArea ~ 'answer') }}"><textarea rows=1 id="answer-form-text" class="form-control" name="answer-form-text"></textarea>
        <input type="hidden" name="parentcomment" value="{{ item.id }}" />
        <input type="hidden" name="owner" value="{{ subscriberOwner|e('html_attr') }}" />
        <input type="hidden" name="areaId" value="{{ subscriberAreaId|e('html_attr') }}" />
        <input type="hidden" name="objectId" value="{{ subscriberObjectId|e('html_attr') }}" />
        <input type="hidden" name="url" value="{{ subscriberUrl|e('html_attr') }}" />
        <input type="hidden" name="assignedEntity" value="comment" />
        <input class="comment-submit btn btn-default btn-sm" name="save" type="submit" /></form><br />
        </noscript>
        {% if item.comments %}
            {% for answer in item.comments %}
                <div class="comments-answers">
                <span class="answer-avatar">
                {{ userAvatar(answer.createdBy.getUid(), {rating: 'g'}) }}</span> 
                {% set profileLink = answer.createdBy.getUid()|profileLinkByUserId() %} 
                {{ profileLink|raw }} 
                {{ answer.text }} 
                {% if levels == 'one' or levels == 'two' %}
                <span class="answer-container"><a title="{{ answer.id }}" class="comment-answer btn btn-default btn-xs" href="#"><i class="fa fa-reply" aria-hidden="true"></i></a><span class="answer-form"></span></span>
                {% endif %}
                {% if answer.comments %}
                    {% for answer in answer.comments %}
                    <div class="comments-answers second-level">
                    <span class="answer-avatar">
                    {{ userAvatar(answer.createdBy.getUid(), {rating: 'g'}) }}</span> 
                    {% set profileLink = answer.createdBy.getUid()|profileLinkByUserId() %} 
                    {{ profileLink|raw }} 
                    {{ answer.text }} 
                    {% if levels >= 3 %}
                    <span class="answer-container"><a title="{{ answer.id }}" class="comment-answer btn btn-default btn-xs" href="#"><i class="fa fa-reply" aria-hidden="true"></i></a><span class="answer-form"></span></span>
                    {% endif %}
                    </div>
                    {% endfor %}
                {% endif %}
                </div>
            {% endfor %}
        {% endif %}
        
    </div>
    </div>  
    </div>
    <div class="col-md-12">
   </div>
    </div>
{% endfor %}<br style="clear: both;" />
{% if context == 'hookDisplayView' and hasEditPermission %}
    {{ mucommentsmodule_showEditForm() }}
{% endif %}
</div>
{% endif %}
{% if context == 'hookDisplayView' and hasEditPermission %}
    {% set withImage = false %}
    {% set idPrefix = 'hookAssignmentComment' %}
    {% set addLinkText = __f('Attach %name%', {'%name%': entityNameTranslated}) %}
    <div id="{{ idPrefix }}LiveSearch" class="mucommentsmodule-add-hook-assignment">
        <a id="{{ idPrefix }}AddLink" href="javascript:void(0);" title="{{ addLinkText|e('html_attr') }}" class="attach-mucommentsmodule-object hidden" data-owner="{{ subscriberOwner|e('html_attr') }}" data-area-id="{{ subscriberAreaId|e('html_attr') }}" data-object-id="{{ subscriberObjectId|e('html_attr') }}" data-url="{{ subscriberUrl|e('html_attr') }}" data-assigned-entity="comment"><i class="fa fa-link"></i> {{ addLinkText }}</a>
        <div id="{{ idPrefix }}AddFields" class="mucommentsmodule-autocomplete{{ withImage ? '-with-image' : '' }}">
            <label for="{{ idPrefix }}Selector">{{ __f('Find %name%', {'%name%': entityNameTranslated}) }}</label>
            <br />
            <i class="fa fa-search" title="{{ __f('Search %name%', {'%name%': entityNameTranslated})|e('html_attr') }}"></i>
            <input type="hidden" name="{{ idPrefix }}" id="{{ idPrefix }}" value="" />
            <input type="hidden" name="{{ idPrefix }}Multiple" id="{{ idPrefix }}Multiple" value="0" />
            <input type="hidden" name="{{ idPrefix }}Mode" id="{{ idPrefix }}Mode" value="0" />
            <input type="hidden" name="{{ idPrefix }}ExcludedIds" id="{{ idPrefix }}ExcludedIds" value="{% for assignment in assignments %}{% if not loop.first %},{% endif %}{{ assignment.getAssignedId() }}{% endfor %}" />
            <input type="text" id="{{ idPrefix }}Selector" name="{{ idPrefix }}Selector" autocomplete="off" />
            <input type="button" id="{{ idPrefix }}SelectorDoCancel" name="{{ idPrefix }}SelectorDoCancel" value="{{ __('Cancel') }}" class="btn btn-default mucommentsmodule-inline-button" />
            <a id="{{ idPrefix }}SelectorDoNew" href="{{ path('mucommentsmodule_comment_' ~ routeArea ~ 'edit') }}" title="{{ __f('Create new %name%', {'%name%': entityNameTranslated}) }}" class="btn btn-default mucommentsmodule-inline-button">{{ __('Create') }}</a>
            <noscript><p>{{ __('This function requires JavaScript activated!') }}</p></noscript>
        </div>
    </div>
    {% set assignmentInitScript %}
        <script type="text/javascript">
        /* <![CDATA[ */
            var relationHandler = new Array();
            var newItem = {
                ot: 'comment',
                prefix: '{{ idPrefix }}SelectorDoNew',
                moduleName: 'MUCommentsModule',
                acInstance: null,
                windowInstanceId: null
            };
            relationHandler.push(newItem);

            mUCommentsInitRelationItemsForm('comment', '{{ idPrefix }}', true);
        /* ]]> */
        </script>
        <script>
        var MU = jQuery.noConflict();
        MU().ready(function() {
        MU('.comment-answer').click(function(e) {
            e.preventDefault();
            MU('.this-answer-form').remove();
            var formCommentId = 'form' + MU(this).attr('title');
            var commentId = MU(this).attr('title');
            MU(this).parent().children('.answer-form').append('<form id="' + formCommentId + '" class="this-answer-form"><textarea id="answer-form-text" name="answer-form-text" class="form-control" rows=1 placeholder="{{ __('Enter your comment') }}"></textarea><input type="hidden" id="parentcomment" name="parentcomment" value="' + commentId + '" /></form>');
        });
        MU('form').live('keydown', function(e) {
           if (e.which == '13') {
           if(e.shiftKey == 0) {
                e.preventDefault();
                var text = MU(this).find('#answer-form-text').val();
                var commentId = MU(this).find('#parentcomment').val();
                if(MU('#anser-form-text').val() != '') {
                    MU('.this-answer-form').parent().append('<img class="commentimg" src="/zik15/images/ajax/indicator_circle.gif" />');
                    MU('.this-answer-form').remove();
                    MU.ajax({
                        method: 'POST',
                        url: '{{ path('mucommentsmodule_ajax_' ~ routeArea ~ 'answer') }}',

                        data: {
                            owner: '{{ subscriberOwner|e('html_attr') }}',
                            areaId: '{{ subscriberAreaId|e('html_attr') }}',
                            objectId: '{{ subscriberObjectId|e('html_attr') }}',
                            //url: '{{ subscriberUrl }}',
                            text: text,
                            parentcomment: commentId,
                            assignedEntity: 'comment'
                        },
                        success: function(data) {
                        var out = '<div class="comments-answers"><span class="answer-avatar"></span>' + data.link + ' ' + data.text + '</div>';
                            MU('#commenttext' + commentId).append(out);
                            MU('.commentimg').hide('slow');
                        }
                    });
                }
              }
           }
        });
        
        MU('.comment-submit').click(function(e) {
            e.preventDefault();
            var container = MU(this).parent('.comment-container');
            if(MU('#answer-form-text').val() != '') {
                alert('gesendet');
                MU.get('{{ path('mucommentsmodule_ajax_' ~ routeArea ~ 'answer') }}', function(result) {
                    if(result) {
                        MU('#commenttext1').append('Hallo');
                    }
                });
            }
        });
        });
        </script>
    {% endset %}
    {{ pageAddAsset('footer', assignmentInitScript) }}
{% endif %}
