<?php
/**
 * Comments.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 1.0.1 (https://modulestudio.de).
 */

namespace MU\CommentsModule\Form\Type\Base;

use Symfony\Component\Form\AbstractType;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\FormBuilderInterface;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\Common\Translator\TranslatorTrait;
use Zikula\GroupsModule\Constant as GroupsConstant;
use Zikula\GroupsModule\Entity\RepositoryInterface\GroupRepositoryInterface;

/**
 * Configuration form type base class.
 */
abstract class AbstractConfigType extends AbstractType
{
    use TranslatorTrait;

    /**
     * @var array
     */
    protected $moduleVars;

    /**
     * ConfigType constructor.
     *
     * @param TranslatorInterface      $translator      Translator service instance
     * @param object                   $moduleVars      Existing module vars
     * @param GroupRepositoryInterface $groupRepository GroupRepository service instance
     */
    public function __construct(
        TranslatorInterface $translator,
        $moduleVars,
        GroupRepositoryInterface $groupRepository
    ) {
        $this->setTranslator($translator);
        $this->moduleVars = $moduleVars;

        // prepare group selector values
        foreach (['moderationGroupForComments'] as $groupFieldName) {
            $groupId = intval($this->moduleVars[$groupFieldName]);
            if ($groupId < 1) {
                // fallback to admin group
                $groupId = GroupsConstant::GROUP_ID_ADMIN;
            }
            $this->moduleVars[$groupFieldName] = $groupRepository->find($groupId);
        }
    }

    /**
     * Sets the translator.
     *
     * @param TranslatorInterface $translator Translator service instance
     */
    public function setTranslator(/*TranslatorInterface */$translator)
    {
        $this->translator = $translator;
    }

    /**
     * @inheritDoc
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $this->addGeneralSettingsFields($builder, $options);
        $this->addSpamHandlingFields($builder, $options);
        $this->addModerationFields($builder, $options);
        $this->addListViewsFields($builder, $options);

        $builder
            ->add('save', SubmitType::class, [
                'label' => $this->__('Update configuration'),
                'icon' => 'fa-check',
                'attr' => [
                    'class' => 'btn btn-success'
                ]
            ])
            ->add('cancel', SubmitType::class, [
                'label' => $this->__('Cancel'),
                'icon' => 'fa-times',
                'attr' => [
                    'class' => 'btn btn-default',
                    'formnovalidate' => 'formnovalidate'
                ]
            ])
        ;
    }

    /**
     * Adds fields for general settings fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addGeneralSettingsFields(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('logIp', CheckboxType::class, [
                'label' => $this->__('Log ip') . ':',
                'required' => false,
                'data' => (bool)(isset($this->moduleVars['logIp']) ? $this->moduleVars['logIp'] : false),
                'attr' => [
                    'title' => $this->__('The log ip option.')
                ],
            ])
            ->add('orderComments', ChoiceType::class, [
                'label' => $this->__('Order comments') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Here you can decide, how to order main comments.')
                ],
                'help' => $this->__('Here you can decide, how to order main comments.'),
                'data' => isset($this->moduleVars['orderComments']) ? $this->moduleVars['orderComments'] : '',
                'empty_data' => '',
                'attr' => [
                    'title' => $this->__('Choose the order comments.')
                ],'choices' => [
                    $this->__('Ascending') => 'ascending',
                    $this->__('Descending') => 'descending'
                ],
                'choices_as_values' => true,
                'multiple' => false
            ])
        ;
    }

    /**
     * Adds fields for spam handling fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addSpamHandlingFields(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('spamProtector', ChoiceType::class, [
                'label' => $this->__('Spam protector') . ':',
                'data' => isset($this->moduleVars['spamProtector']) ? $this->moduleVars['spamProtector'] : '',
                'empty_data' => '',
                'attr' => [
                    'title' => $this->__('Choose the spam protector.')
                ],'choices' => [
                    $this->__('None') => 'none',
                    $this->__('Intern') => 'intern',
                    $this->__('Captcha') => 'captcha'
                ],
                'choices_as_values' => true,
                'multiple' => false
            ])
        ;
    }

    /**
     * Adds fields for moderation fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addModerationFields(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('moderationGroupForComments', EntityType::class, [
                'label' => $this->__('Moderation group for comments') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Used to determine moderator user accounts for sending email notifications.')
                ],
                'help' => $this->__('Used to determine moderator user accounts for sending email notifications.'),
                'data' => isset($this->moduleVars['moderationGroupForComments']) ? $this->moduleVars['moderationGroupForComments'] : '',
                'attr' => [
                    'maxlength' => 255,
                    'title' => $this->__('Choose the moderation group for comments.')
                ],// Zikula core should provide a form type for this to hide entity details
                'class' => 'ZikulaGroupsModule:GroupEntity',
                'choice_label' => 'name',
                'choice_value' => 'gid'
            ])
        ;
    }

    /**
     * Adds fields for list views fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addListViewsFields(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('commentEntriesPerPage', IntegerType::class, [
                'label' => $this->__('Comment entries per page') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('The amount of comments shown per page')
                ],
                'help' => $this->__('The amount of comments shown per page'),
                'required' => false,
                'data' => isset($this->moduleVars['commentEntriesPerPage']) ? intval($this->moduleVars['commentEntriesPerPage']) : intval(10),
                'empty_data' => intval('10'),
                'attr' => [
                    'maxlength' => 255,
                    'title' => $this->__('Enter the comment entries per page.') . ' ' . $this->__('Only digits are allowed.')
                ],'scale' => 0
            ])
            ->add('linkOwnCommentsOnAccountPage', CheckboxType::class, [
                'label' => $this->__('Link own comments on account page') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Whether to add a link to comments of the current user on his account page')
                ],
                'help' => $this->__('Whether to add a link to comments of the current user on his account page'),
                'required' => false,
                'data' => (bool)(isset($this->moduleVars['linkOwnCommentsOnAccountPage']) ? $this->moduleVars['linkOwnCommentsOnAccountPage'] : true),
                'attr' => [
                    'title' => $this->__('The link own comments on account page option.')
                ],
            ])
        ;
    }

    /**
     * @inheritDoc
     */
    public function getBlockPrefix()
    {
        return 'mucommentsmodule_config';
    }
}
