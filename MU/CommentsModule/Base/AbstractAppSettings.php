<?php
/**
 * Comments.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link https://ziku.la
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\CommentsModule\Base;

use Symfony\Component\Validator\Constraints as Assert;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;
use Zikula\GroupsModule\Constant as GroupsConstant;
use Zikula\GroupsModule\Entity\RepositoryInterface\GroupRepositoryInterface;
use MU\CommentsModule\Validator\Constraints as CommentsAssert;

/**
 * Application settings class for handling module variables.
 */
abstract class AbstractAppSettings
{
    /**
     * @var VariableApiInterface
     */
    protected $variableApi;
    
    /**
     * @var GroupRepositoryInterface
     */
    protected $groupRepository;
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $logIp
     */
    protected $logIp = false;
    
    /**
     * @Assert\NotBlank()
     * @CommentsAssert\ListEntry(entityName="appSettings", propertyName="orderComments", multiple=false)
     * @var string $orderComments
     */
    protected $orderComments = 'desc';
    
    /**
     * @Assert\NotBlank()
     * @CommentsAssert\ListEntry(entityName="appSettings", propertyName="levelsOfComments", multiple=false)
     * @var string $levelsOfComments
     */
    protected $levelsOfComments = 'one';
    
    /**
     * @Assert\NotBlank()
     * @CommentsAssert\ListEntry(entityName="appSettings", propertyName="positionOfForm", multiple=false)
     * @var string $positionOfForm
     */
    protected $positionOfForm = 'above';
    
    /**
     * If empty this feature is disabled.
     *
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $linkToPrivacyPolicy
     */
    protected $linkToPrivacyPolicy = '';
    
    /**
     * Enable, if you want to activate the mailing feature.
     If someone checks the field send mails, he gets a mail, when someone answers to his comment.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $sendMails
     */
    protected $sendMails = false;
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $enableInternSpamHandling
     */
    protected $enableInternSpamHandling = false;
    
    /**
     * Enter commaseparated words, that has to push an entry to moderate.
     Like (sex,porno) for example.
     *
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $toModeration
     */
    protected $toModeration = '';
    
    /**
     * Enter commaseparated words, that has to push an entry to block and not saved.
     Like (sex,porno) for example.
     *
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $toNotSaved
     */
    protected $toNotSaved = '';
    
    /**
     * Used to determine moderator user accounts for sending email notifications.
     *
     * @Assert\NotBlank()
     * @var integer $moderationGroupForComments
     */
    protected $moderationGroupForComments = 2;
    
    /**
     * The amount of comments shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $commentEntriesPerPage
     */
    protected $commentEntriesPerPage = 10;
    
    /**
     * Whether to add a link to comments of the current user on his account page
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $linkOwnCommentsOnAccountPage
     */
    protected $linkOwnCommentsOnAccountPage = true;
    
    /**
     * Whether only own entries should be shown on view pages by default or not
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $showOnlyOwnEntries
     */
    protected $showOnlyOwnEntries = false;
    
    /**
     * Which sections are supported in the Finder component (used by Scribite plug-ins).
     *
     * @Assert\NotNull()
     * @CommentsAssert\ListEntry(entityName="appSettings", propertyName="enabledFinderTypes", multiple=true)
     * @var string $enabledFinderTypes
     */
    protected $enabledFinderTypes = 'comment';
    
    
    /**
     * AppSettings constructor.
     *
     * @param VariableApiInterface $variableApi VariableApi service instance
     * @param GroupRepositoryInterface $groupRepository GroupRepository service instance
     */
    public function __construct(
        VariableApiInterface $variableApi,
        GroupRepositoryInterface $groupRepository
    ) {
        $this->variableApi = $variableApi;
        $this->groupRepository = $groupRepository;
    
        $this->load();
    }
    
    /**
     * Returns the log ip.
     *
     * @return boolean
     */
    public function getLogIp()
    {
        return $this->logIp;
    }
    
    /**
     * Sets the log ip.
     *
     * @param boolean $logIp
     *
     * @return void
     */
    public function setLogIp($logIp)
    {
        if (boolval($this->logIp) !== boolval($logIp)) {
            $this->logIp = boolval($logIp);
        }
    }
    
    /**
     * Returns the order comments.
     *
     * @return string
     */
    public function getOrderComments()
    {
        return $this->orderComments;
    }
    
    /**
     * Sets the order comments.
     *
     * @param string $orderComments
     *
     * @return void
     */
    public function setOrderComments($orderComments)
    {
        if ($this->orderComments !== $orderComments) {
            $this->orderComments = isset($orderComments) ? $orderComments : '';
        }
    }
    
    /**
     * Returns the levels of comments.
     *
     * @return string
     */
    public function getLevelsOfComments()
    {
        return $this->levelsOfComments;
    }
    
    /**
     * Sets the levels of comments.
     *
     * @param string $levelsOfComments
     *
     * @return void
     */
    public function setLevelsOfComments($levelsOfComments)
    {
        if ($this->levelsOfComments !== $levelsOfComments) {
            $this->levelsOfComments = isset($levelsOfComments) ? $levelsOfComments : '';
        }
    }
    
    /**
     * Returns the position of form.
     *
     * @return string
     */
    public function getPositionOfForm()
    {
        return $this->positionOfForm;
    }
    
    /**
     * Sets the position of form.
     *
     * @param string $positionOfForm
     *
     * @return void
     */
    public function setPositionOfForm($positionOfForm)
    {
        if ($this->positionOfForm !== $positionOfForm) {
            $this->positionOfForm = isset($positionOfForm) ? $positionOfForm : '';
        }
    }
    
    /**
     * Returns the link to privacy policy.
     *
     * @return string
     */
    public function getLinkToPrivacyPolicy()
    {
        return $this->linkToPrivacyPolicy;
    }
    
    /**
     * Sets the link to privacy policy.
     *
     * @param string $linkToPrivacyPolicy
     *
     * @return void
     */
    public function setLinkToPrivacyPolicy($linkToPrivacyPolicy)
    {
        if ($this->linkToPrivacyPolicy !== $linkToPrivacyPolicy) {
            $this->linkToPrivacyPolicy = isset($linkToPrivacyPolicy) ? $linkToPrivacyPolicy : '';
        }
    }
    
    /**
     * Returns the send mails.
     *
     * @return boolean
     */
    public function getSendMails()
    {
        return $this->sendMails;
    }
    
    /**
     * Sets the send mails.
     *
     * @param boolean $sendMails
     *
     * @return void
     */
    public function setSendMails($sendMails)
    {
        if (boolval($this->sendMails) !== boolval($sendMails)) {
            $this->sendMails = boolval($sendMails);
        }
    }
    
    /**
     * Returns the enable intern spam handling.
     *
     * @return boolean
     */
    public function getEnableInternSpamHandling()
    {
        return $this->enableInternSpamHandling;
    }
    
    /**
     * Sets the enable intern spam handling.
     *
     * @param boolean $enableInternSpamHandling
     *
     * @return void
     */
    public function setEnableInternSpamHandling($enableInternSpamHandling)
    {
        if (boolval($this->enableInternSpamHandling) !== boolval($enableInternSpamHandling)) {
            $this->enableInternSpamHandling = boolval($enableInternSpamHandling);
        }
    }
    
    /**
     * Returns the to moderation.
     *
     * @return string
     */
    public function getToModeration()
    {
        return $this->toModeration;
    }
    
    /**
     * Sets the to moderation.
     *
     * @param string $toModeration
     *
     * @return void
     */
    public function setToModeration($toModeration)
    {
        if ($this->toModeration !== $toModeration) {
            $this->toModeration = isset($toModeration) ? $toModeration : '';
        }
    }
    
    /**
     * Returns the to not saved.
     *
     * @return string
     */
    public function getToNotSaved()
    {
        return $this->toNotSaved;
    }
    
    /**
     * Sets the to not saved.
     *
     * @param string $toNotSaved
     *
     * @return void
     */
    public function setToNotSaved($toNotSaved)
    {
        if ($this->toNotSaved !== $toNotSaved) {
            $this->toNotSaved = isset($toNotSaved) ? $toNotSaved : '';
        }
    }
    
    /**
     * Returns the moderation group for comments.
     *
     * @return integer
     */
    public function getModerationGroupForComments()
    {
        return $this->moderationGroupForComments;
    }
    
    /**
     * Sets the moderation group for comments.
     *
     * @param integer $moderationGroupForComments
     *
     * @return void
     */
    public function setModerationGroupForComments($moderationGroupForComments)
    {
        if ($this->moderationGroupForComments !== $moderationGroupForComments) {
            $this->moderationGroupForComments = $moderationGroupForComments;
        }
    }
    
    /**
     * Returns the comment entries per page.
     *
     * @return integer
     */
    public function getCommentEntriesPerPage()
    {
        return $this->commentEntriesPerPage;
    }
    
    /**
     * Sets the comment entries per page.
     *
     * @param integer $commentEntriesPerPage
     *
     * @return void
     */
    public function setCommentEntriesPerPage($commentEntriesPerPage)
    {
        if (intval($this->commentEntriesPerPage) !== intval($commentEntriesPerPage)) {
            $this->commentEntriesPerPage = intval($commentEntriesPerPage);
        }
    }
    
    /**
     * Returns the link own comments on account page.
     *
     * @return boolean
     */
    public function getLinkOwnCommentsOnAccountPage()
    {
        return $this->linkOwnCommentsOnAccountPage;
    }
    
    /**
     * Sets the link own comments on account page.
     *
     * @param boolean $linkOwnCommentsOnAccountPage
     *
     * @return void
     */
    public function setLinkOwnCommentsOnAccountPage($linkOwnCommentsOnAccountPage)
    {
        if (boolval($this->linkOwnCommentsOnAccountPage) !== boolval($linkOwnCommentsOnAccountPage)) {
            $this->linkOwnCommentsOnAccountPage = boolval($linkOwnCommentsOnAccountPage);
        }
    }
    
    /**
     * Returns the show only own entries.
     *
     * @return boolean
     */
    public function getShowOnlyOwnEntries()
    {
        return $this->showOnlyOwnEntries;
    }
    
    /**
     * Sets the show only own entries.
     *
     * @param boolean $showOnlyOwnEntries
     *
     * @return void
     */
    public function setShowOnlyOwnEntries($showOnlyOwnEntries)
    {
        if (boolval($this->showOnlyOwnEntries) !== boolval($showOnlyOwnEntries)) {
            $this->showOnlyOwnEntries = boolval($showOnlyOwnEntries);
        }
    }
    
    /**
     * Returns the enabled finder types.
     *
     * @return string
     */
    public function getEnabledFinderTypes()
    {
        return $this->enabledFinderTypes;
    }
    
    /**
     * Sets the enabled finder types.
     *
     * @param string $enabledFinderTypes
     *
     * @return void
     */
    public function setEnabledFinderTypes($enabledFinderTypes)
    {
        if ($this->enabledFinderTypes !== $enabledFinderTypes) {
            $this->enabledFinderTypes = isset($enabledFinderTypes) ? $enabledFinderTypes : '';
        }
    }
    
    
    /**
     * Loads module variables from the database.
     */
    protected function load()
    {
        $moduleVars = $this->variableApi->getAll('MUCommentsModule');
    
        if (isset($moduleVars['logIp'])) {
            $this->setLogIp($moduleVars['logIp']);
        }
        if (isset($moduleVars['orderComments'])) {
            $this->setOrderComments($moduleVars['orderComments']);
        }
        if (isset($moduleVars['levelsOfComments'])) {
            $this->setLevelsOfComments($moduleVars['levelsOfComments']);
        }
        if (isset($moduleVars['positionOfForm'])) {
            $this->setPositionOfForm($moduleVars['positionOfForm']);
        }
        if (isset($moduleVars['linkToPrivacyPolicy'])) {
            $this->setLinkToPrivacyPolicy($moduleVars['linkToPrivacyPolicy']);
        }
        if (isset($moduleVars['sendMails'])) {
            $this->setSendMails($moduleVars['sendMails']);
        }
        if (isset($moduleVars['enableInternSpamHandling'])) {
            $this->setEnableInternSpamHandling($moduleVars['enableInternSpamHandling']);
        }
        if (isset($moduleVars['toModeration'])) {
            $this->setToModeration($moduleVars['toModeration']);
        }
        if (isset($moduleVars['toNotSaved'])) {
            $this->setToNotSaved($moduleVars['toNotSaved']);
        }
        if (isset($moduleVars['moderationGroupForComments'])) {
            $this->setModerationGroupForComments($moduleVars['moderationGroupForComments']);
        }
        if (isset($moduleVars['commentEntriesPerPage'])) {
            $this->setCommentEntriesPerPage($moduleVars['commentEntriesPerPage']);
        }
        if (isset($moduleVars['linkOwnCommentsOnAccountPage'])) {
            $this->setLinkOwnCommentsOnAccountPage($moduleVars['linkOwnCommentsOnAccountPage']);
        }
        if (isset($moduleVars['showOnlyOwnEntries'])) {
            $this->setShowOnlyOwnEntries($moduleVars['showOnlyOwnEntries']);
        }
        if (isset($moduleVars['enabledFinderTypes'])) {
            $this->setEnabledFinderTypes($moduleVars['enabledFinderTypes']);
        }
    
        // prepare group selectors, fallback to admin group for undefined values
        $adminGroupId = GroupsConstant::GROUP_ID_ADMIN;
        $groupId = $this->getModerationGroupForComments();
        if ($groupId < 1) {
            $groupId = $adminGroupId;
        }
    
        $this->setModerationGroupForComments($this->groupRepository->find($groupId));
    }
    
    /**
     * Saves module variables into the database.
     */
    public function save()
    {
        // normalise group selector values
        $group = $this->getModerationGroupForComments();
        $group = is_object($group) ? $group->getGid() : intval($group);
        $this->setModerationGroupForComments($group);
    
        $this->variableApi->set('MUCommentsModule', 'logIp', $this->getLogIp());
        $this->variableApi->set('MUCommentsModule', 'orderComments', $this->getOrderComments());
        $this->variableApi->set('MUCommentsModule', 'levelsOfComments', $this->getLevelsOfComments());
        $this->variableApi->set('MUCommentsModule', 'positionOfForm', $this->getPositionOfForm());
        $this->variableApi->set('MUCommentsModule', 'linkToPrivacyPolicy', $this->getLinkToPrivacyPolicy());
        $this->variableApi->set('MUCommentsModule', 'sendMails', $this->getSendMails());
        $this->variableApi->set('MUCommentsModule', 'enableInternSpamHandling', $this->getEnableInternSpamHandling());
        $this->variableApi->set('MUCommentsModule', 'toModeration', $this->getToModeration());
        $this->variableApi->set('MUCommentsModule', 'toNotSaved', $this->getToNotSaved());
        $this->variableApi->set('MUCommentsModule', 'moderationGroupForComments', $this->getModerationGroupForComments());
        $this->variableApi->set('MUCommentsModule', 'commentEntriesPerPage', $this->getCommentEntriesPerPage());
        $this->variableApi->set('MUCommentsModule', 'linkOwnCommentsOnAccountPage', $this->getLinkOwnCommentsOnAccountPage());
        $this->variableApi->set('MUCommentsModule', 'showOnlyOwnEntries', $this->getShowOnlyOwnEntries());
        $this->variableApi->set('MUCommentsModule', 'enabledFinderTypes', $this->getEnabledFinderTypes());
    }
}
